<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.dajeong.myapp.dao.UserDao">
	<insert id="insertUser" parameterType="java.util.HashMap">
		INSERT INTO user(
			email,
			nickname,
			password,
			auth_key
		) VALUES (
			#{email},
			#{nickname},
			#{password},
			#{auth_key}
		)
	</insert>
	
	<update id="updateUserAuthKey" parameterType="java.util.HashMap">
		UPDATE
			user
		SET
			auth_key = 'Y'
		WHERE
			email = #{email} AND auth_key = #{auth_key}
	</update>
	
	<select id="checkAuthKey" parameterType="java.util.HashMap" resultType="String">
		SELECT
			auth_key
		FROM
			user
		WHERE
			email = #{email} AND password = #{password}
	</select>
	
	<select id="checkUser" parameterType="java.util.HashMap" resultType="int">
		SELECT EXISTS(
			SELECT
				*
			FROM
				user
			WHERE
				email = #{email} AND password = #{password}
		)
	</select>
	
	<!-- 자동 로그인 -->
	<update id="updateSessionKey" parameterType="java.util.HashMap">
		UPDATE
			user
		SET
			sessionKey = #{sessionKey},
			sessionLimit = #{sessionLimit}
		WHERE
			email = #{email}
	</update>
	
	<select id="checkSessionLimit" parameterType="String" resultType="com.dajeong.myapp.dto.User">
		SELECT
			*
		FROM
			user
		WHERE
			sessionKey = #{sessionKey} AND sessionLimit > now()
	</select>
	
	<select id="selectUserData" parameterType="String" resultType="com.dajeong.myapp.dto.User">
		SELECT
			*
		FROM
			user
		WHERE
			email = #{email}
	</select>
	
	<select id="checkUserNickname" parameterType="String" resultType="int">
		SELECT EXISTS (
			SELECT
				*
			FROM
				user
			WHERE
				nickname = #{nickname}
		)
	</select>
	
	<select id="checkUserEmail" parameterType="String" resultType="int">
		SELECT EXISTS (
			SELECT
				*
			FROM
				user
			WHERE
				email = #{email}
		)
	</select>
	
	<update id="updateUserNickname" parameterType="java.util.HashMap">
		UPDATE
			user
		SET
			nickname = #{nickname}
		WHERE
			email = #{email}
	</update>
	
	<update id="updateUserHouse" parameterType="java.util.HashMap">
		UPDATE
			user
		SET
			house = #{house}
		WHERE
			email = #{email}
	</update>
	
	<update id="updateUserPassword" parameterType="java.util.HashMap">
		UPDATE
			user
		SET
			password = #{new_pwd}
		WHERE
			email = #{email} AND password = #{current_pwd}
	</update>
	
	<delete id="deleteUser" parameterType="java.util.HashMap">
		DELETE FROM
			user
		WHERE
			email = #{email} AND password = #{password}
	</delete>
	
	<update id="updateToTempPassword" parameterType="java.util.HashMap">
		UPDATE
			user
		SET
			password = #{tempPW}
		WHERE
			email = #{email}
	</update>
	
	<!-- 관리자 -->
	<select id="selectAllUserCnt" resultType="int">
		SELECT
			count(*)
		FROM
			user
	</select>
	
	<select id="selectUserList" resultType="com.dajeong.myapp.dto.User">
		SELECT
			email,
			nickname,
			house,
			date_format(join_datet, '%Y-%m-%d')as join_date,
			auth_key
		FROM
			user
		WHERE
			NOT email = 'sobeast980@gmail.com'
		ORDER BY
			join_date desc
		LIMIT
			#{startContent}, #{contentViewCnt}
	</select>
	
	<delete id="adminDeleteUser" parameterType="String">
		DELETE FROM
			user
		WHERE
			email = #{email}
	</delete>
	
	<update id="adminUpdateUserPassword" parameterType="java.util.HashMap">
		UPDATE
			user
		SET
			password = #{new_pwd}
		WHERE
			email = #{email}
	</update>
	
	<update id="adminUpdateUserAuthKey" parameterType="String">
		UPDATE
			user
		SET
			auth_key = 'Y'
		WHERE
			email = #{email}
	</update>
	
	<!-- 관리자 - 검색 -->
	<select id="selectUserSearchEmailCnt" parameterType="java.util.HashMap" resultType="int">
		SELECT
			count(email)
		FROM
			user
		WHERE
			email like CONCAT('%', #{data}, '%')
	</select>
	
	<select id="selectUserSearchNicknameCnt" parameterType="java.util.HashMap" resultType="int">
		SELECT
			count(email)
		FROM
			user
		WHERE
			nickname like CONCAT('%', #{data}, '%')
	</select>
	
	<select id="selectUserSearchEmailList" resultType="com.dajeong.myapp.dto.User">
		SELECT
			email,
			nickname,
			house,
			date_format(join_date, '%Y-%m-%d')as join_date,
			auth_key
		FROM
			user
		WHERE
			email like CONCAT('%', #{data}, '%')
		ORDER BY
			join_date desc
		LIMIT
			#{startContent}, #{contentViewCnt}
	</select>
	
	<select id="selectUserSearchNicknameList" resultType="com.dajeong.myapp.dto.User">
		SELECT
			email,
			nickname,
			house,
			date_format(join_date, '%Y-%m-%d')as join_date,
			auth_key
		FROM
			user
		WHERE
			nickname like CONCAT('%', #{data}, '%')
		ORDER BY
			join_date desc
		LIMIT
			#{startContent}, #{contentViewCnt}
	</select>
</mapper>